// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloud/v1/cloud.proto

package cloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskManagementService_CreateTask_FullMethodName       = "/cloud.v1.TaskManagementService/CreateTask"
	TaskManagementService_GetTask_FullMethodName          = "/cloud.v1.TaskManagementService/GetTask"
	TaskManagementService_ListTasks_FullMethodName        = "/cloud.v1.TaskManagementService/ListTasks"
	TaskManagementService_GetTaskHistory_FullMethodName   = "/cloud.v1.TaskManagementService/GetTaskHistory"
	TaskManagementService_UpdateTaskStatus_FullMethodName = "/cloud.v1.TaskManagementService/UpdateTaskStatus"
	TaskManagementService_GetStatus_FullMethodName        = "/cloud.v1.TaskManagementService/GetStatus"
	TaskManagementService_StreamConnection_FullMethodName = "/cloud.v1.TaskManagementService/StreamConnection"
)

// TaskManagementServiceClient is the client API for TaskManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Task Management service definition
type TaskManagementServiceClient interface {
	// Creates a new task based on the provided request.
	// Returns a CreateTaskResponse containing the unique identifier of the created task.
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// Retrieves the current status and details of the specified task.
	// Returns a Task message containing all information about the requested task.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Lists tasks currently available in the system, with pagination support.
	// Returns a TaskList containing the requested subset of tasks.
	ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskList, error)
	// Retrieves the execution history of the specified task.
	// Returns a GetTaskHistoryResponse containing a list of historical status updates.
	GetTaskHistory(ctx context.Context, in *GetTaskHistoryRequest, opts ...grpc.CallOption) (*GetTaskHistoryResponse, error)
	// Updates the status of the specified task.
	// Returns an empty response to confirm the update was processed.
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves the count of tasks for each status.
	// Returns a GetStatusResponse containing a map of status counts.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	StreamConnection(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
}

type taskManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagementServiceClient(cc grpc.ClientConnInterface) TaskManagementServiceClient {
	return &taskManagementServiceClient{cc}
}

func (c *taskManagementServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, TaskManagementService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskManagementService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskManagementService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) GetTaskHistory(ctx context.Context, in *GetTaskHistoryRequest, opts ...grpc.CallOption) (*GetTaskHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskHistoryResponse)
	err := c.cc.Invoke(ctx, TaskManagementService_GetTaskHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskManagementService_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, TaskManagementService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) StreamConnection(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskManagementService_ServiceDesc.Streams[0], TaskManagementService_StreamConnection_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_StreamConnectionClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

// TaskManagementServiceServer is the server API for TaskManagementService service.
// All implementations must embed UnimplementedTaskManagementServiceServer
// for forward compatibility.
//
// Task Management service definition
type TaskManagementServiceServer interface {
	// Creates a new task based on the provided request.
	// Returns a CreateTaskResponse containing the unique identifier of the created task.
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// Retrieves the current status and details of the specified task.
	// Returns a Task message containing all information about the requested task.
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	// Lists tasks currently available in the system, with pagination support.
	// Returns a TaskList containing the requested subset of tasks.
	ListTasks(context.Context, *TaskListRequest) (*TaskList, error)
	// Retrieves the execution history of the specified task.
	// Returns a GetTaskHistoryResponse containing a list of historical status updates.
	GetTaskHistory(context.Context, *GetTaskHistoryRequest) (*GetTaskHistoryResponse, error)
	// Updates the status of the specified task.
	// Returns an empty response to confirm the update was processed.
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*emptypb.Empty, error)
	// Retrieves the count of tasks for each status.
	// Returns a GetStatusResponse containing a map of status counts.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	StreamConnection(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	mustEmbedUnimplementedTaskManagementServiceServer()
}

// UnimplementedTaskManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskManagementServiceServer struct{}

func (UnimplementedTaskManagementServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskManagementServiceServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskManagementServiceServer) ListTasks(context.Context, *TaskListRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskManagementServiceServer) GetTaskHistory(context.Context, *GetTaskHistoryRequest) (*GetTaskHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskHistory not implemented")
}
func (UnimplementedTaskManagementServiceServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskManagementServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTaskManagementServiceServer) StreamConnection(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConnection not implemented")
}
func (UnimplementedTaskManagementServiceServer) mustEmbedUnimplementedTaskManagementServiceServer() {}
func (UnimplementedTaskManagementServiceServer) testEmbeddedByValue()                               {}

// UnsafeTaskManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagementServiceServer will
// result in compilation errors.
type UnsafeTaskManagementServiceServer interface {
	mustEmbedUnimplementedTaskManagementServiceServer()
}

func RegisterTaskManagementServiceServer(s grpc.ServiceRegistrar, srv TaskManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskManagementService_ServiceDesc, srv)
}

func _TaskManagementService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).ListTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_GetTaskHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).GetTaskHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_GetTaskHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).GetTaskHistory(ctx, req.(*GetTaskHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_StreamConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagementServiceServer).StreamConnection(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_StreamConnectionServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

// TaskManagementService_ServiceDesc is the grpc.ServiceDesc for TaskManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.v1.TaskManagementService",
	HandlerType: (*TaskManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManagementService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskManagementService_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskManagementService_ListTasks_Handler,
		},
		{
			MethodName: "GetTaskHistory",
			Handler:    _TaskManagementService_GetTaskHistory_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TaskManagementService_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TaskManagementService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConnection",
			Handler:       _TaskManagementService_StreamConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud/v1/cloud.proto",
}

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	task "task/server/repository/model/task"
)

// TaskRepo is an autogenerated mock type for the TaskRepo type
type TaskRepo struct {
	mock.Mock
}

type TaskRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepo) EXPECT() *TaskRepo_Expecter {
	return &TaskRepo_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, _a1
func (_m *TaskRepo) CreateTask(ctx context.Context, _a1 task.Task) (task.Task, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, task.Task) (task.Task, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, task.Task) task.Task); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, task.Task) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepo_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskRepo_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 task.Task
func (_e *TaskRepo_Expecter) CreateTask(ctx interface{}, _a1 interface{}) *TaskRepo_CreateTask_Call {
	return &TaskRepo_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, _a1)}
}

func (_c *TaskRepo_CreateTask_Call) Run(run func(ctx context.Context, _a1 task.Task)) *TaskRepo_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task.Task))
	})
	return _c
}

func (_c *TaskRepo_CreateTask_Call) Return(_a0 task.Task, _a1 error) *TaskRepo_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepo_CreateTask_Call) RunAndReturn(run func(context.Context, task.Task) (task.Task, error)) *TaskRepo_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function with given fields: ctx, taskID
func (_m *TaskRepo) GetTaskByID(ctx context.Context, taskID uint) (*task.Task, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*task.Task, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *task.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepo_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type TaskRepo_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID uint
func (_e *TaskRepo_Expecter) GetTaskByID(ctx interface{}, taskID interface{}) *TaskRepo_GetTaskByID_Call {
	return &TaskRepo_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, taskID)}
}

func (_c *TaskRepo_GetTaskByID_Call) Run(run func(ctx context.Context, taskID uint)) *TaskRepo_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *TaskRepo_GetTaskByID_Call) Return(_a0 *task.Task, _a1 error) *TaskRepo_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepo_GetTaskByID_Call) RunAndReturn(run func(context.Context, uint) (*task.Task, error)) *TaskRepo_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatusCounts provides a mock function with given fields: ctx
func (_m *TaskRepo) GetTaskStatusCounts(ctx context.Context) (map[int]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatusCounts")
	}

	var r0 map[int]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepo_GetTaskStatusCounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatusCounts'
type TaskRepo_GetTaskStatusCounts_Call struct {
	*mock.Call
}

// GetTaskStatusCounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TaskRepo_Expecter) GetTaskStatusCounts(ctx interface{}) *TaskRepo_GetTaskStatusCounts_Call {
	return &TaskRepo_GetTaskStatusCounts_Call{Call: _e.mock.On("GetTaskStatusCounts", ctx)}
}

func (_c *TaskRepo_GetTaskStatusCounts_Call) Run(run func(ctx context.Context)) *TaskRepo_GetTaskStatusCounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskRepo_GetTaskStatusCounts_Call) Return(_a0 map[int]int64, _a1 error) *TaskRepo_GetTaskStatusCounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepo_GetTaskStatusCounts_Call) RunAndReturn(run func(context.Context) (map[int]int64, error)) *TaskRepo_GetTaskStatusCounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, limit, offset, status, taskType
func (_m *TaskRepo) ListTasks(ctx context.Context, limit int, offset int, status int, taskType string) ([]task.Task, error) {
	ret := _m.Called(ctx, limit, offset, status, taskType)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 []task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string) ([]task.Task, error)); ok {
		return rf(ctx, limit, offset, status, taskType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string) []task.Task); ok {
		r0 = rf(ctx, limit, offset, status, taskType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, string) error); ok {
		r1 = rf(ctx, limit, offset, status, taskType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepo_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskRepo_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
//   - status int
//   - taskType string
func (_e *TaskRepo_Expecter) ListTasks(ctx interface{}, limit interface{}, offset interface{}, status interface{}, taskType interface{}) *TaskRepo_ListTasks_Call {
	return &TaskRepo_ListTasks_Call{Call: _e.mock.On("ListTasks", ctx, limit, offset, status, taskType)}
}

func (_c *TaskRepo_ListTasks_Call) Run(run func(ctx context.Context, limit int, offset int, status int, taskType string)) *TaskRepo_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int), args[4].(string))
	})
	return _c
}

func (_c *TaskRepo_ListTasks_Call) Return(_a0 []task.Task, _a1 error) *TaskRepo_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepo_ListTasks_Call) RunAndReturn(run func(context.Context, int, int, int, string) ([]task.Task, error)) *TaskRepo_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatus provides a mock function with given fields: ctx, taskID, status
func (_m *TaskRepo) UpdateTaskStatus(ctx context.Context, taskID uint, status int) error {
	ret := _m.Called(ctx, taskID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int) error); ok {
		r0 = rf(ctx, taskID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepo_UpdateTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatus'
type TaskRepo_UpdateTaskStatus_Call struct {
	*mock.Call
}

// UpdateTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID uint
//   - status int
func (_e *TaskRepo_Expecter) UpdateTaskStatus(ctx interface{}, taskID interface{}, status interface{}) *TaskRepo_UpdateTaskStatus_Call {
	return &TaskRepo_UpdateTaskStatus_Call{Call: _e.mock.On("UpdateTaskStatus", ctx, taskID, status)}
}

func (_c *TaskRepo_UpdateTaskStatus_Call) Run(run func(ctx context.Context, taskID uint, status int)) *TaskRepo_UpdateTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(int))
	})
	return _c
}

func (_c *TaskRepo_UpdateTaskStatus_Call) Return(_a0 error) *TaskRepo_UpdateTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepo_UpdateTaskStatus_Call) RunAndReturn(run func(context.Context, uint, int) error) *TaskRepo_UpdateTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRepo creates a new instance of TaskRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepo {
	mock := &TaskRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

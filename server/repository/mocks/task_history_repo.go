// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	task "task/server/repository/model/task"
)

// TaskHistoryRepo is an autogenerated mock type for the TaskHistoryRepo type
type TaskHistoryRepo struct {
	mock.Mock
}

type TaskHistoryRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskHistoryRepo) EXPECT() *TaskHistoryRepo_Expecter {
	return &TaskHistoryRepo_Expecter{mock: &_m.Mock}
}

// CreateTaskHistory provides a mock function with given fields: ctx, history
func (_m *TaskHistoryRepo) CreateTaskHistory(ctx context.Context, history task.TaskHistory) (task.TaskHistory, error) {
	ret := _m.Called(ctx, history)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskHistory")
	}

	var r0 task.TaskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, task.TaskHistory) (task.TaskHistory, error)); ok {
		return rf(ctx, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, task.TaskHistory) task.TaskHistory); ok {
		r0 = rf(ctx, history)
	} else {
		r0 = ret.Get(0).(task.TaskHistory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, task.TaskHistory) error); ok {
		r1 = rf(ctx, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskHistoryRepo_CreateTaskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskHistory'
type TaskHistoryRepo_CreateTaskHistory_Call struct {
	*mock.Call
}

// CreateTaskHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - history task.TaskHistory
func (_e *TaskHistoryRepo_Expecter) CreateTaskHistory(ctx interface{}, history interface{}) *TaskHistoryRepo_CreateTaskHistory_Call {
	return &TaskHistoryRepo_CreateTaskHistory_Call{Call: _e.mock.On("CreateTaskHistory", ctx, history)}
}

func (_c *TaskHistoryRepo_CreateTaskHistory_Call) Run(run func(ctx context.Context, history task.TaskHistory)) *TaskHistoryRepo_CreateTaskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task.TaskHistory))
	})
	return _c
}

func (_c *TaskHistoryRepo_CreateTaskHistory_Call) Return(_a0 task.TaskHistory, _a1 error) *TaskHistoryRepo_CreateTaskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskHistoryRepo_CreateTaskHistory_Call) RunAndReturn(run func(context.Context, task.TaskHistory) (task.TaskHistory, error)) *TaskHistoryRepo_CreateTaskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskHistory provides a mock function with given fields: ctx, taskID
func (_m *TaskHistoryRepo) GetTaskHistory(ctx context.Context, taskID uint) ([]task.TaskHistory, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskHistory")
	}

	var r0 []task.TaskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]task.TaskHistory, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []task.TaskHistory); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.TaskHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskHistoryRepo_GetTaskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskHistory'
type TaskHistoryRepo_GetTaskHistory_Call struct {
	*mock.Call
}

// GetTaskHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID uint
func (_e *TaskHistoryRepo_Expecter) GetTaskHistory(ctx interface{}, taskID interface{}) *TaskHistoryRepo_GetTaskHistory_Call {
	return &TaskHistoryRepo_GetTaskHistory_Call{Call: _e.mock.On("GetTaskHistory", ctx, taskID)}
}

func (_c *TaskHistoryRepo_GetTaskHistory_Call) Run(run func(ctx context.Context, taskID uint)) *TaskHistoryRepo_GetTaskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *TaskHistoryRepo_GetTaskHistory_Call) Return(_a0 []task.TaskHistory, _a1 error) *TaskHistoryRepo_GetTaskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskHistoryRepo_GetTaskHistory_Call) RunAndReturn(run func(context.Context, uint) ([]task.TaskHistory, error)) *TaskHistoryRepo_GetTaskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskHistories provides a mock function with given fields: ctx, taskID
func (_m *TaskHistoryRepo) ListTaskHistories(ctx context.Context, taskID uint) ([]task.TaskHistory, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskHistories")
	}

	var r0 []task.TaskHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]task.TaskHistory, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []task.TaskHistory); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.TaskHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskHistoryRepo_ListTaskHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskHistories'
type TaskHistoryRepo_ListTaskHistories_Call struct {
	*mock.Call
}

// ListTaskHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID uint
func (_e *TaskHistoryRepo_Expecter) ListTaskHistories(ctx interface{}, taskID interface{}) *TaskHistoryRepo_ListTaskHistories_Call {
	return &TaskHistoryRepo_ListTaskHistories_Call{Call: _e.mock.On("ListTaskHistories", ctx, taskID)}
}

func (_c *TaskHistoryRepo_ListTaskHistories_Call) Run(run func(ctx context.Context, taskID uint)) *TaskHistoryRepo_ListTaskHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *TaskHistoryRepo_ListTaskHistories_Call) Return(_a0 []task.TaskHistory, _a1 error) *TaskHistoryRepo_ListTaskHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskHistoryRepo_ListTaskHistories_Call) RunAndReturn(run func(context.Context, uint) ([]task.TaskHistory, error)) *TaskHistoryRepo_ListTaskHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskHistoryRepo creates a new instance of TaskHistoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskHistoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskHistoryRepo {
	mock := &TaskHistoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

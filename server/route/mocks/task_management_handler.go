// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	cloudv1 "task/pkg/gen/cloud/v1"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// TaskManagementHandler is an autogenerated mock type for the TaskManagementHandler type
type TaskManagementHandler struct {
	mock.Mock
}

type TaskManagementHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskManagementHandler) EXPECT() *TaskManagementHandler_Expecter {
	return &TaskManagementHandler_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, req
func (_m *TaskManagementHandler) CreateTask(ctx context.Context, req *cloudv1.CreateTaskRequest) (*cloudv1.CreateTaskResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *cloudv1.CreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.CreateTaskRequest) (*cloudv1.CreateTaskResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.CreateTaskRequest) *cloudv1.CreateTaskResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudv1.CreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudv1.CreateTaskRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskManagementHandler_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskManagementHandler_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req *cloudv1.CreateTaskRequest
func (_e *TaskManagementHandler_Expecter) CreateTask(ctx interface{}, req interface{}) *TaskManagementHandler_CreateTask_Call {
	return &TaskManagementHandler_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, req)}
}

func (_c *TaskManagementHandler_CreateTask_Call) Run(run func(ctx context.Context, req *cloudv1.CreateTaskRequest)) *TaskManagementHandler_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cloudv1.CreateTaskRequest))
	})
	return _c
}

func (_c *TaskManagementHandler_CreateTask_Call) Return(_a0 *cloudv1.CreateTaskResponse, _a1 error) *TaskManagementHandler_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskManagementHandler_CreateTask_Call) RunAndReturn(run func(context.Context, *cloudv1.CreateTaskRequest) (*cloudv1.CreateTaskResponse, error)) *TaskManagementHandler_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, req
func (_m *TaskManagementHandler) GetTask(ctx context.Context, req *cloudv1.GetTaskRequest) (*cloudv1.Task, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *cloudv1.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.GetTaskRequest) (*cloudv1.Task, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.GetTaskRequest) *cloudv1.Task); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudv1.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudv1.GetTaskRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskManagementHandler_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TaskManagementHandler_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req *cloudv1.GetTaskRequest
func (_e *TaskManagementHandler_Expecter) GetTask(ctx interface{}, req interface{}) *TaskManagementHandler_GetTask_Call {
	return &TaskManagementHandler_GetTask_Call{Call: _e.mock.On("GetTask", ctx, req)}
}

func (_c *TaskManagementHandler_GetTask_Call) Run(run func(ctx context.Context, req *cloudv1.GetTaskRequest)) *TaskManagementHandler_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cloudv1.GetTaskRequest))
	})
	return _c
}

func (_c *TaskManagementHandler_GetTask_Call) Return(_a0 *cloudv1.Task, _a1 error) *TaskManagementHandler_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskManagementHandler_GetTask_Call) RunAndReturn(run func(context.Context, *cloudv1.GetTaskRequest) (*cloudv1.Task, error)) *TaskManagementHandler_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskHistory provides a mock function with given fields: ctx, req
func (_m *TaskManagementHandler) GetTaskHistory(ctx context.Context, req *cloudv1.GetTaskHistoryRequest) (*cloudv1.GetTaskHistoryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskHistory")
	}

	var r0 *cloudv1.GetTaskHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.GetTaskHistoryRequest) (*cloudv1.GetTaskHistoryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.GetTaskHistoryRequest) *cloudv1.GetTaskHistoryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudv1.GetTaskHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudv1.GetTaskHistoryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskManagementHandler_GetTaskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskHistory'
type TaskManagementHandler_GetTaskHistory_Call struct {
	*mock.Call
}

// GetTaskHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - req *cloudv1.GetTaskHistoryRequest
func (_e *TaskManagementHandler_Expecter) GetTaskHistory(ctx interface{}, req interface{}) *TaskManagementHandler_GetTaskHistory_Call {
	return &TaskManagementHandler_GetTaskHistory_Call{Call: _e.mock.On("GetTaskHistory", ctx, req)}
}

func (_c *TaskManagementHandler_GetTaskHistory_Call) Run(run func(ctx context.Context, req *cloudv1.GetTaskHistoryRequest)) *TaskManagementHandler_GetTaskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cloudv1.GetTaskHistoryRequest))
	})
	return _c
}

func (_c *TaskManagementHandler_GetTaskHistory_Call) Return(_a0 *cloudv1.GetTaskHistoryResponse, _a1 error) *TaskManagementHandler_GetTaskHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskManagementHandler_GetTaskHistory_Call) RunAndReturn(run func(context.Context, *cloudv1.GetTaskHistoryRequest) (*cloudv1.GetTaskHistoryResponse, error)) *TaskManagementHandler_GetTaskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, req
func (_m *TaskManagementHandler) ListTasks(ctx context.Context, req *cloudv1.TaskListRequest) (*cloudv1.TaskList, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *cloudv1.TaskList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.TaskListRequest) (*cloudv1.TaskList, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.TaskListRequest) *cloudv1.TaskList); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudv1.TaskList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudv1.TaskListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskManagementHandler_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskManagementHandler_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - req *cloudv1.TaskListRequest
func (_e *TaskManagementHandler_Expecter) ListTasks(ctx interface{}, req interface{}) *TaskManagementHandler_ListTasks_Call {
	return &TaskManagementHandler_ListTasks_Call{Call: _e.mock.On("ListTasks", ctx, req)}
}

func (_c *TaskManagementHandler_ListTasks_Call) Run(run func(ctx context.Context, req *cloudv1.TaskListRequest)) *TaskManagementHandler_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cloudv1.TaskListRequest))
	})
	return _c
}

func (_c *TaskManagementHandler_ListTasks_Call) Return(_a0 *cloudv1.TaskList, _a1 error) *TaskManagementHandler_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskManagementHandler_ListTasks_Call) RunAndReturn(run func(context.Context, *cloudv1.TaskListRequest) (*cloudv1.TaskList, error)) *TaskManagementHandler_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatus provides a mock function with given fields: ctx, req
func (_m *TaskManagementHandler) UpdateTaskStatus(ctx context.Context, req *cloudv1.UpdateTaskStatusRequest) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatus")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.UpdateTaskStatusRequest) (*emptypb.Empty, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudv1.UpdateTaskStatusRequest) *emptypb.Empty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudv1.UpdateTaskStatusRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskManagementHandler_UpdateTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatus'
type TaskManagementHandler_UpdateTaskStatus_Call struct {
	*mock.Call
}

// UpdateTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *cloudv1.UpdateTaskStatusRequest
func (_e *TaskManagementHandler_Expecter) UpdateTaskStatus(ctx interface{}, req interface{}) *TaskManagementHandler_UpdateTaskStatus_Call {
	return &TaskManagementHandler_UpdateTaskStatus_Call{Call: _e.mock.On("UpdateTaskStatus", ctx, req)}
}

func (_c *TaskManagementHandler_UpdateTaskStatus_Call) Run(run func(ctx context.Context, req *cloudv1.UpdateTaskStatusRequest)) *TaskManagementHandler_UpdateTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cloudv1.UpdateTaskStatusRequest))
	})
	return _c
}

func (_c *TaskManagementHandler_UpdateTaskStatus_Call) Return(_a0 *emptypb.Empty, _a1 error) *TaskManagementHandler_UpdateTaskStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskManagementHandler_UpdateTaskStatus_Call) RunAndReturn(run func(context.Context, *cloudv1.UpdateTaskStatusRequest) (*emptypb.Empty, error)) *TaskManagementHandler_UpdateTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskManagementHandler creates a new instance of TaskManagementHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskManagementHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskManagementHandler {
	mock := &TaskManagementHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
